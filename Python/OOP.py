# -*- coding: utf-8 -*-
"""DONE Chapter 4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aPYlycs6_oqIfaDlnqMtYIqpu4r_yWiY
"""

#classes are used to assign attributes allows you to access those values
# basically it will assign it to all players in this class
# can't use julio.catch_rate as it wont return anything, need to use julio.catch_rate()
# self allows u to use call a method using dot notation, since self basically is just a placeholder for things like that. Basically when you use self.name, it calls the objects name thats made in the function used.
# it makes more sense when you actually use it and see it in action, this description is not really that good but it makes sense in my own words.
# in this instance we  create a class named player, and the attributes that we are applying to the objects made in this class are name, pos, catches, targets, rushing_attempts, rushing_yds
#
class Player: # Defining a class

  def __init__(self, name, pos, catches, targets, rushing_attempts, rushing_yds): # defining a function with all of these attributes init stands for initalize and we are intializing the function here
  # using self to call each of the attributes that we made earlier in the above line
  # setting those attributes to variables
  # this initialization allows us to to create the functions below using the attributes above
    self.name = name
    self.pos = pos
    self.catches = catches
    self.targets = targets
    self.rushing_attempts = rushing_attempts
    self.rushing_yds = rushing_yds
  # defining a function catch_rate that has the attribute self. This attribute allows it to use all theother attributes above by using self.____
  def catch_rate(self):
    return self.catches/self.targets
  # defining a function yards_per_carry that has the attribute self. This attribute allows it to use all theother attributes above by using self.____
  def yards_per_carry(self):
    return self.rushing_yds/self.rushing_attempts
  # defining a function effiency that has the attribute self. This attribute allows it to use all theother attributes above by using self.____
  # this function takes in the two functions above, and returns the output of them
  def efficiency(self):
    return{
      'yds_per_carry' : self.yards_per_carry(),
      'catch_rate' : self.catch_rate()
    }

julio = Player('Julio Jones', 'WR', 99, 124, 2, -3)
mt = Player('Michael Thomas', 'WR', 140, 160, 3, 4)

# each of these showing how we can call the function and use it to find the statistics of MT and JJ. Just a few example of calling the function
# When the variable is given values, we can just call it using the variablename + .name for example, we do not need to use parenthesis and this actually will cause an error
julio.name
julio.pos
julio.catch_rate()
julio.yards_per_carry()
mt.name
print("MT rushing Attempts" + mt.rushing_attempts), mt.rushing_attempts, print("MT Rushing Yds"), mt.rushing_yds